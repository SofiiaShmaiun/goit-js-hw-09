{"mappings":"gfAAA,IAOIA,EACAC,EACAC,EATJC,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,qBACpCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,sBACrCG,EAAeJ,SAASC,cAAc,SAiC5C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,QAEpDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,O,GAEnDA,E,IApCPR,EAAWiB,iBAAiB,SAAS,SAAAC,GACnCrB,EAAQsB,OAAOD,EAAME,OAAOC,M,IAE9BlB,EAAUc,iBAAiB,SAAS,SAAAC,GAClCvB,EAAOwB,OAAOD,EAAME,OAAOC,M,IAE7BjB,EAAYa,iBAAiB,SAAS,SAAAC,GACpCtB,EAASuB,OAAOD,EAAME,OAAOC,M,IAE/BhB,EAAaY,iBAAiB,UAE9B,SAA0BC,GACxBA,EAAMI,iBAEN,IADA,IAAIf,EAAW,EACNgB,EAAI,EAAGA,EAAI3B,EAAQ2B,IAE1BjB,EADAC,GAAY,EACYV,GACrB2B,MAAK,SAAAC,GACJ3B,EAAA4B,OAAOC,QAAQF,E,IAEhBG,OAAM,SAAAH,GACL3B,EAAA4B,OAAOG,QAAQJ,E,IAEnB5B,GAASF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayInput = document.querySelector('input[name=delay]');\nconst stepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\nconst submitButton = document.querySelector('.form');\n\nlet step;\nlet amount;\nlet delay;\n\ndelayInput.addEventListener('input', event => {\n  delay = Number(event.target.value);\n});\nstepInput.addEventListener('input', event => {\n  step = Number(event.target.value);\n});\namountInput.addEventListener('input', event => {\n  amount = Number(event.target.value);\n});\nsubmitButton.addEventListener('submit', handleSubmitData);\n\nfunction handleSubmitData(event) {\n  event.preventDefault();\n  let position = 0;\n  for (let i = 0; i < amount; i++) {\n    position += 1;\n    createPromise(position, delay)\n      .then(result => {\n        Notify.success(result);\n      })\n      .catch(result => {\n        Notify.failure(result);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay} ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delay","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$submitButton","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","event","Number","target","value","preventDefault","i","then","result","Notify","success","catch","failure"],"version":3,"file":"03-promises.05336752.js.map"}